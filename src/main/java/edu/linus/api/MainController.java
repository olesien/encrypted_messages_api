package edu.linus.api;

import edu.linus.api.models.ApiResponse;
import edu.linus.api.models.LoginForm;
import edu.linus.api.models.UserWithJWT;
import edu.linus.api.models.Users;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.security.NoSuchAlgorithmException;
import java.util.Optional;

import static edu.linus.api.Auth.generateJWT;
import static edu.linus.api.Auth.hashPassword;

@CrossOrigin(origins = "http://localhost:3000/", maxAge = 3600)
@RestController // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private Environment env;

    @PostMapping(path="/register") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<ApiResponse> register (@RequestBody RegisterForm registerForm) throws NoSuchAlgorithmException {
        Users n = new Users();
        n.setName(registerForm.getName());
        n.setEmail(registerForm.getEmail());
        n.setPassword(hashPassword(registerForm.getPassword(), env));
        Users savedUser = userRepository.save(n);
        String jwt = generateJWT(env);
        return ResponseEntity.status(HttpStatus.OK).body(new ApiResponse("Success", new UserWithJWT(savedUser.getName(), savedUser.getEmail(), jwt)));
    }

    @PostMapping(path="/login") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<ApiResponse> login (@RequestBody LoginForm loginForm) throws NoSuchAlgorithmException {
        String hashedPassword = hashPassword(loginForm.getPassword(), env);

        Optional<Users> user = userRepository.findByEmail(loginForm.getEmail());

        if (user.isPresent()) {
            Users newUser = user.get();
            if (newUser.getPassword().equals(hashedPassword)) {
                //Exists
                String jwt = generateJWT(env);
                return ResponseEntity.status(HttpStatus.OK).body(new ApiResponse("Success", new UserWithJWT(newUser.getName(), newUser.getEmail(), jwt)));
            } else {
                //403; Passwords do not match
                return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ApiResponse("Passwords do not match", null));

            }
        } else {
            //404 not found
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse("Not Found", null));
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Users> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}